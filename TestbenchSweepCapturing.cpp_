/*
 * TestbenchSweepCapturing.cpp
 *
 *  Created on: 31/03/2019
 *      Author: new-mauro
 */

#include "Spectran.h"
#include "SweepProcessing.h"

void WaitForKey()
{
    cin.clear();
    cin.ignore(std::cin.rdbuf()->in_avail());
    cin.get();
}

int main()
{
	cout << "\t\tTestbench de las clases SpectranInterface, SpectranConfigurator, SweepBuilder, RFPloter y DataLogger" << endl;

	try
	{
		SpectranInterface specInterface;

		cout << "\nIniciando la comunicacion con el dispositivo Spectran HF-60105 V4 X" << endl;
		specInterface.Initialize();
		cout << "La sesion fue iniciada con exito" << endl;

		SpectranConfigurator specConfigurator(specInterface);
		SweepBuilder swBuilder(specInterface);

		//Cargando los parametros
		cout << "\nCargando los parametros de configuracion del dispositivo Spectran desde los archivos correspondientes" << endl;
		if( specConfigurator.LoadFixedParameters() )
		{
			//If the fixed parameters were loaded for the first time or they were reloaded, the initial configuration will be repeated
			cout << "Los parametros fijos fueron cargados por primera vez o fueron recargados por lo que se efectuara la configuracion inicial" << endl;
			specConfigurator.InitialConfiguration();
			cout << "La configuracion inicial fue realizada con exito" << endl;
		}

		cout << "\nCargando los parametros de las bandas frecuenciales" << endl;
		specConfigurator.LoadBandsParameters();
		cout << "\nLos parametros de las bandas fueron cargados exitosamente" << endl;

		FreqValueSet wholeSweep;

		//Capturando los barridos de cada una de las bandas que componen el barrido completo
		for(unsigned int i=0; i < specConfigurator.GetNumOfBands(); i++)
		{
			VarParameters bandParam;
			FreqValueSet freqBand;

			cout << "\nSe inicia el proceso de captura de un nuevo barrido, correspondiente a la banda frecuencial NÂ° " << i+1 << endl;
			cout << "Configurando el dispositivo Spectran con los parametros de la siguiente banda frecuencial" << endl;
			specConfigurator.ConfigureNextBand();

			bandParam = specConfigurator.GetCurrBandParam();
			swBuilder.SetBandParameters(bandParam);

			cout << "Capturando los puntos de un barrido" << endl;
			freqBand = swBuilder.CaptureOneSweep();
			cout << "La captura de un barrido finalizo" << endl;

			cout << "Agregando el barrido de la banda frecuencial actual al final del barrido completo" << endl;
			wholeSweep.PushBack(freqBand);
		}

//		cout.precision(1);
//		cout.setf(std::ios::fixed, std::ios::floatfield);
//
//		cout << "\nA continuacion se graficara el barrido completo capturado." << endl;
//		cout << "Presione ENTER para que se inicie la visualizacion del barrido..." << endl;
//
//		WaitForKey();
//
//		cout << "\n\t\tFrequency (Hz)\t\tPower (dBm)" << endl;
//		for(std::uint8_t i=0; i < wholeSweep.values.size(); i++)
//			cout << "\t\t" << wholeSweep.frequencies[i] << "\t\t" << wholeSweep.values[i] << endl;

		DataLogger logger;
		logger.SetSweep(wholeSweep);

		cout << "\nAlmacenando el barrido completo 16 veces con distintos valores de timestamp y de posicion de la antena para emular un funcionamiento real" << endl;
		for(uint8_t i=0; i<8; i++)
		{
			logger.SetAntennaData(45.0*i, "horizontal");
			logger.SaveData();
			wholeSweep.timeData.hour++;
			logger.SetAntennaData(45.0*i, "vertical");
			logger.SaveData();
			wholeSweep.timeData.hour++;
		}
		cout << "Almacenamiento de los datos finalizado" << endl;

		RFPloter rfPloter;
		cout << "\nGraficando el barrido completo" << endl;
		rfPloter.PlotSweep(wholeSweep);

		cout << "\nPresione cualquier tecla para terminar..." << endl;
		WaitForKey();
	}
	catch(std::exception & exc)
	{
		cerr << "\nError: " << exc.what() << endl;

		WaitForKey();

		exit(EXIT_FAILURE);
	}

	return 0;
}
