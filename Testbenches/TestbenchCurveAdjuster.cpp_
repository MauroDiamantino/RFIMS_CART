/*
 * TestbenchCurveAdjuster.cpp
 *
 *  Created on: 19/04/2019
 *      Author: new-mauro
 */

#include "SweepProcessing.h"

void WaitForKey()
{
	cin.clear();
	cin.ignore(std::cin.rdbuf()->in_avail());
	cin.get();
}

int main() throw(std::exception)
{
	cout << "\t\tTestebench de la clase CurveAdjuster" << endl;

	BandParameters auxBandParam;
	std::vector<BandParameters> bandsParameters;

	auxBandParam.detector=0;
	auxBandParam.flagDefaultSamplePoints=true;
	auxBandParam.flagEnable=true;
	auxBandParam.rbw=1e6;
	auxBandParam.startFreq=900e6;
	auxBandParam.stopFreq=950e6;
	auxBandParam.sweepTime=1000;
	auxBandParam.vbw=1.5e6;
	auxBandParam.samplePoints=( auxBandParam.stopFreq - auxBandParam.startFreq ) / auxBandParam.rbw + 1;
	bandsParameters.push_back(auxBandParam);

	auxBandParam.detector=0;
	auxBandParam.flagDefaultSamplePoints=true;
	auxBandParam.flagEnable=true;
	auxBandParam.rbw=30e3;
	auxBandParam.startFreq=950e6;
	auxBandParam.stopFreq=1000e6;
	auxBandParam.sweepTime=1000;
	auxBandParam.vbw=100e3;
	auxBandParam.samplePoints=( auxBandParam.stopFreq - auxBandParam.startFreq ) / auxBandParam.rbw;
	bandsParameters.push_back(auxBandParam);

	CurveAdjuster adjuster(bandsParameters);

	FreqValueSet curve("enr");

	curve.frequencies.push_back(910e6);
	curve.values.push_back(15.0);

	curve.frequencies.push_back(930e6);
	curve.values.push_back(14.0);

	curve.frequencies.push_back(960e6);
	curve.values.push_back(13.0);

	curve.frequencies.push_back(980e6);
	curve.values.push_back(15.0);

	adjuster.AdjustCurve(curve);

	RFPloter ploter;

	ploter.Plot(adjuster.GetAdjustedCurve(), "points", "ENRadjusted");
	ploter.Plot(curve, "points", "ENR");

	cout << "Presione una tecla para terminar..." << endl;
	WaitForKey();

	return 0;
}
