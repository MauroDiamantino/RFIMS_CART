/*
 * Testbench1.cpp
 *
 *  Created on: 27/02/2019
 *      Author: new-mauro
 */
#include "SpectranInterface.h"

void PrintBytes(const Command& comm)
{
	const uint8_t* ptr = comm.GetBytesPointer();

	cout << "El vector de bytes obtenido es el siguiente:" << endl;
	for(unsigned int i=0; i<comm.GetNumOfBytes(); i++)
	{
		printf("\t0x%02X",ptr[i]);
	}
	cout << endl;
}

void SetAndShowCommands(Command::CommandType type, VarName var1, VarName var2, float value)
{
	Command comm;

	for (uint8_t i=uint8_t(var1); i<=uint8_t(var2); i++){
		comm.Clear();
		comm.SetAs(type, VarName(i), value);
		assert( comm.GetCommandType()==type );
		assert( comm.GetVariableName()==VarName(i) );
		assert( comm.GetValue()==value );
		cout << "\nConfiguracion de un comando " << comm.GetCommTypeString();
		if( type==Command::GETSTPVAR )
		{
			cout << " para leer la variable 0x";
			printf("%02X", i);
		}
		else if( type==Command::SETSTPVAR )
		{
			cout << " para configurar la variable 0x";
			printf("%02X", i);
			cout << " con el valor " << value;
		}
		cout << endl;
		PrintBytes(comm);
	}
}

void SetAndShowCommands(Command::CommandType type, VarName var, float value) {	SetAndShowCommands(type, var, var, value);	}

int main()
{
	Command comm;
	const uint8_t * bytes;

	cout << "Configuracion de un comando VERIFY" << endl;
	comm.SetAs(Command::VERIFY);
	assert(comm.GetCommandType()==Command::VERIFY);
	assert(comm.GetCommTypeString()=="VERIFY");
	assert(comm.GetNumOfBytes()==5);
	bytes=comm.GetBytesPointer();
	assert( bytes[0]==0x01 && bytes[1]==0xA5 && bytes[2]==0x5A && bytes[3]==0xF1 && bytes[4]==0x1F );
	PrintBytes(comm);
	comm.Clear();
	assert(comm.GetCommandType()==Command::UNINITIALIZED);
	assert(comm.GetNumOfBytes()==0);

	cout << "\nConfiguracion de un comando LOGOUT" << endl;
	comm.SetAs(Command::LOGOUT);
	assert(comm.GetCommandType()==Command::LOGOUT);
	assert(comm.GetNumOfBytes()==1);
	bytes=comm.GetBytesPointer();
	assert( bytes[0]==0x02 );
	PrintBytes(comm);
	comm.Clear();

	for (char j=Command::GETSTPVAR; j<=Command::SETSTPVAR; j++){

		SetAndShowCommands(Command::CommandType(j), VarName::STARTFREQ, VarName::RECVCONF, 1e6);

		SetAndShowCommands(Command::CommandType(j), VarName::CENTERFREQ, VarName::SPANFREQ, 2e6);

		SetAndShowCommands(Command::CommandType(j), VarName::PREAMPEN, VarName::REFOFFS, 3e6);

		SetAndShowCommands(Command::CommandType(j), VarName::USBMEAS, VarName::USBSWPID, 1.0);

		SetAndShowCommands(Command::CommandType(j), VarName::SPKVOLUME, 1.0);

		SetAndShowCommands(Command::CommandType(j), VarName::STDTONE, 1000.0);
	}

	cout << "\nEl testbench de la clase Comando finalizo con resultados exitosos. Sigue asi!!" << endl;

	return 0;
}
